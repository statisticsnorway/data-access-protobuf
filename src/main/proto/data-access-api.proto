syntax = "proto3";

option java_multiple_files = true;
option java_package = "no.ssb.dapla.data.access.protobuf";

service DataAccessService {
    rpc getAccessToken (AccessTokenRequest) returns (AccessTokenResponse);
    rpc getLocation (LocationRequest) returns (LocationResponse);
}

enum Privilege {
    READ = 0;
    WRITE = 1;
}

enum Valuation {
    SENSITIVE = 0;
    SHIELDED = 1;
    INTERNAL = 2;
    OPEN = 3;
}

enum DatasetState {
    OTHER = 0;
    RAW = 1;
    INPUT = 2;
    PROCESSED = 3;
    OUTPUT = 4;
    PRODUCT = 5;
}

message WriteOptions {
    Valuation valuation = 1;
    DatasetState state = 2;
}

message AccessTokenRequest {
    Privilege privilege = 2;
    string path = 3; // example: '/rawdata/skatt/konto'

    // Find version that was valid of the time of snapshot.
    // If not supplied (or value == 0) will find timestamp of latest version.
    int64 snapshot = 4;

    // If Privilege is a WRITE operation, then the writeOptions must be present
    // and contain the desired valuation and state
    WriteOptions writeOptions = 5;
}

message AccessTokenResponse {
    // there will be an exception if access is not allowed
    string accessToken = 1;
    int64 expirationTime = 2;
    string parentUri = 3;
    string version = 4; // only set if there was a READ request, otherwise an empty string
}

message LocationRequest {
    Privilege privilege = 2;
    string path = 3; // example: '/rawdata/skatt/konto'

    // Find version that was valid of the time of snapshot.
    // If not supplied (or value == 0) will find timestamp of latest version.
    int64 snapshot = 4;

    // If Privilege is a WRITE operation, then the writeOptions must be present
    // and contain the desired valuation and state
    WriteOptions writeOptions = 5;
}

message LocationResponse {
    string parentUri = 1; // only set if accessAllowed is true, otherwise an empty string
    string version = 2; // only set if accessAllowed is true and there was a READ request, otherwise an empty string
    bool accessAllowed = 3;
}

