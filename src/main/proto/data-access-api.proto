syntax = "proto3";

option java_multiple_files = true;
option java_package = "no.ssb.dapla.data.access.protobuf";

service DataAccessService {
    rpc readLocation (ReadLocationRequest) returns (ReadLocationResponse);
    rpc readAccessToken (ReadAccessTokenRequest) returns (ReadAccessTokenResponse);
    rpc writeLocation (WriteLocationRequest) returns (WriteLocationResponse);
    rpc writeAccessToken (WriteAccessTokenRequest) returns (WriteAccessTokenResponse);
}

message ReadLocationRequest {
    string path = 3; // example: '/rawdata/skatt/konto'

    // Find version that was valid of the time of snapshot.
    // If not supplied (or value == 0) will find timestamp of latest version.
    int64 snapshot = 4;
}

message ReadLocationResponse {
    string parentUri = 1; // only set if accessAllowed is true, otherwise an empty string
    string version = 2; // only set if accessAllowed is true, otherwise an empty string
    bool accessAllowed = 3;
}

message ReadAccessTokenRequest {
    string path = 3; // example: '/rawdata/skatt/konto'

    // Find version that was valid of the time of snapshot.
    // If not supplied (or value == 0) will find timestamp of latest version.
    int64 snapshot = 4;
}

message ReadAccessTokenResponse {
    // there will be an exception if access is not allowed
    string accessToken = 1;
    int64 expirationTime = 2;
    string parentUri = 3;
    string version = 4; // only set if there was a READ request, otherwise an empty string
}

message WriteLocationRequest {
    // A json serialized representation of metadata according to the dataset-api specification
    string metadataJson = 6;
}

message WriteLocationResponse {
    bool accessAllowed = 3;
    bytes validMetadataJson = 7; // if accessAllowed, bytes of metadata json file that is signed, empty otherwise.
    bytes metadataSignature = 8; // if accessAllowed, a digital signature of the metadata json bytes, empty otherwise
}

message WriteAccessTokenRequest {
    bytes metadataJson = 7; // bytes of metadata json file that is signed
    bytes metadataSignature = 8; // a digital signature of the metadata json bytes
}

message WriteAccessTokenResponse {
    // there will be an exception if access is not allowed
    string accessToken = 1;
    int64 expirationTime = 2;
}
